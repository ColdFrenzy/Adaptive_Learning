import sys
import os
import numpy as np 

sys.path.insert(1, os.path.abspath(os.pardir))

from config.custom_config import Config
from env.connect4_multiagent_env import Connect4Env

basic_config = [np.array([
    [ -1., -1., -1., -1., -1., -1.],
    [ -1., -1., -1., -1., -1., -1.],
    [ -1., -1., -1., -1., -1., -1.],
    [ -1., -1., -1., -1., -1., -1.],
    [ -1., -1., -1., -1., -1., -1.],
    [ -1., -1., -1., -1., -1., -1.],
    [ -1., -1., -1., -1., -1., -1.]]),[0,1,2,3,4,5,6]]
    
# This is a dictionary used to test some basic connect 4 configuration to our 
# learning agent. The structure is like this:
# "index" = [board_config, list_of_good_actions]
# if the learning agent is not able to pick one of the good_actions by its own,
# we return 0, otherwise 1. 
BOARD_CONFIGS = {
    # vertical win 454646
    "v_1": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., 0., 0., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[3]],
    # same win in another column 535454
    "v_2": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., 0., 0., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[5]],
    # win or block 545352
    "v_3":[np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 0., 0., 0., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[4]],
    # win on a higher row 44434545
    "v_4":[np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 0., 1., 0., 0., 0., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[3]],
    # win as second player 1121215
    "v_5": [np.array([
        [ 1., 0., 0., 0., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[0]],
    # 537216435332214546
    "v_6" : [np.array([
        [ 0., 1., -1., -1., -1., -1.],
        [ 1., 1., 0., -1., -1., -1.],
        [ 1., 1., 1., 0., -1., -1.],
        [ 0., 0., 0., -1., -1., -1.],
        [ 0., 0., 1., -1., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.]]),[3]],
    
    
    # horizontal win 324452
    "h_1": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.],
        [ 0., 1., -1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[5]],
    # win or block 34354356
    "h_2": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., 0., 1., -1., -1., -1.],
        [ 1., 0., -1., -1., -1., -1.],
        [ 1., 0., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[5]],
    # second row 1211243533
    "h_3": [np.array([
        [ 0., 0., 1., -1., -1., -1.],
        [ 1., 0., -1., -1., -1., -1.],
        [ 0., 0., 1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[3]],
    # win as second player 3142755334427
    "h_4": [np.array([
        [ 0., -1., -1., -1., -1., -1.],
        [ 0., 0., -1., -1., -1., -1.],
        [ 1., 0., 1., -1., -1., -1.],
        [ 1., 0., 1., -1., -1., -1.],
        [ 0., 1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.]]),[0]],
    # win second row 3456324455
    "h_5": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 0., 0., -1., -1., -1., -1.],
        [ 1., 0., 1., -1., -1., -1.],
        [ 0., 0., 1., -1., -1., -1.], 
        [ 1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[5]],
        
    
    
    # positive scope diagonal win 1223435434
    "psd_1": [np.array([
        [ 0., -1., -1., -1., -1., -1.],
        [ 1., 0., -1., -1., -1., -1.],
        [ 1., 1., 0., -1., -1., -1.],
        [ 0., 1., 1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[3]],
    #another column 416574566776
    "psd_2": [np.array([
        [ 1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., 1., -1., -1., -1., -1.],
        [ 1., 0., -1., -1., -1., -1.],
        [ 0., 1., 0., 1., -1., -1.],
        [ 0., 1., 0., -1., -1., -1.]]),[6]],
    # another row 21432545533445
    "psd_3": [np.array([
        [ 1., -1., -1., -1., -1., -1.],
        [ 0., 0., -1., -1., -1., -1.],
        [ 1., 1., 0., -1., -1., -1.],
        [ 0., 0., 1., 0., -1., -1.],
        [ 1., 1., 0., 1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[4]],
    #double win 23452345563445
    "psd_4": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., 0., -1., -1., -1., -1.],
        [ 1., 1., 0., -1., -1., -1.],
        [ 0., 0., 1., 0., -1., -1.],
        [ 1., 1., 0., 1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[0,4]],
    #as second player 213145235442334
    "psd_5": [np.array([
        [ 0., 0., -1., -1., -1., -1.],
        [ 1., 1., 0., -1., -1., -1.],
        [ 1., 0., 1., 0., -1., -1.],
        [ 1., 0., 1., 1., -1., -1.],
        [ 0., 1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[3]],
    # 444445555566666
    "psd_6": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., 0., 1., 0., 1., -1.],
        [ 0., 1., 0., 1., 0., -1.],
        [ 1., 0., 1., 0., 1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[2]],
    # 11335577123456754
    "psd_7": [np.array([
        [1., 0., 1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.],
        [ 1., 0., 1., -1., -1., -1.],
        [ 0., 1., -1., -1., -1., -1.],
        [ 1., 0., 1., 0., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.],
        [ 1., 0., 1., -1., -1., -1.]]),[3]],
    
    # negative scope diagonal win 2435635443
    "nsd_1": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.],
        [ 0., 1., 1., -1., -1., -1.],
        [ 1., 1., 0., -1., -1., -1.],
        [ 1., 0., -1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[2]],
    # another column 7654456654
    "nsd_2": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., 0., 1., -1., -1., -1.],
        [ 0., 1., 0., -1., -1., -1.],
        [ 1., 0., 1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.]]),[3]],
    # another row 123456712354433226
    "nsd_3": [np.array([
        [ 0., 1., -1., -1., -1., -1.],
        [ 1., 0., 1., 0., -1., -1.],
        [ 0., 1., 1., 0., -1., -1.],
        [ 1., 1., 0., -1., -1., -1.],
        [ 0., 0., -1., -1., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.]]),[1]],
    #double win 76545342335445
    "nsd_4": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 1., 0., 1., -1., -1., -1.],
        [ 1., 0., 1., 0., -1., -1.],
        [ 0., 0., 0., 1., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.]]),[1,5]],
    # as second player 67544576654
    "nsd_5": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., 1., 1., -1., -1., -1.],
        [ 1., 0., 0., -1., -1., -1.],
        [ 1., 0., 1., -1., -1., -1.],
        [ 0., 1., -1., -1., -1., -1.]]),[3]],
    # 11335577123456754242
    "nsd_6": [np.array([
        [0., 1., 0., -1., -1., -1.],
        [ 1., 1., 1., -1., -1., -1.],
        [ 0., 1., 0., -1., -1., -1.],
        [ 1., 0., 0., -1., -1., -1.],
        [ 0., 1., 0., 0., -1., -1.],
        [ 1., -1., -1., -1., -1., -1.],
        [ 0., 1., 0., -1., -1., -1.]]),[1]],
    # 5372164353322145466462
    "nsd_7":[np.array([
        [ 0., 1., -1., -1., -1., -1.],
        [ 1., 1., 0., 1., -1., -1.],
        [ 1., 1., 1., 0., -1., -1.],
        [ 0., 0., 0., 1., -1., -1.],
        [ 0., 0., 1., -1., -1., -1.],
        [ 1., 1., 0., 0., -1., -1.],
        [ 0., -1., -1., -1., -1., -1.]]),[1]],
    # 655444333422356767234637
    "nds_8": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., 1., 0., -1., -1., -1.],
        [ 0., 1., 0., 0., 1., 0.],
        [ 1., 0., 1., 1., 0., -1.],
        [ 1., 0., 1., -1., -1., -1.],
        [ 0., 0., 0., 1., -1., -1.],
        [ 1., 1., 1., -1., -1., -1.]]),[4]],
    # win in 2 4455
    "win_in_2_1": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ 0, 1., -1., -1., -1., -1.],
        [ 0, 1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[2,5]],
    # 432323443245577656
    "win_in_2_2": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., 0., 1., -1., -1., -1.],
        [ 1., 1., 1., 0., -1., -1.],
        [ 0., 0., 1., 0., -1., -1.],
        [ 1., 0., 0., -1., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ 1., 0., -1., -1., -1., -1.]]),[4]],
    # double win 12121123434545
    "double_win_1": [np.array([
        [ 0., 0., 0., 1., -1., -1.],
        [ 1., 1., 0., -1., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ 0., 0., 0., -1., -1., -1.],
        [ 1., 1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.],
        [ -1., -1., -1., -1., -1., -1.]]),[2,3]],
    # 655444333422356767234637755264
    "double_win_2": [np.array([
        [ -1., -1., -1., -1., -1., -1.],
        [ 0., 1., 0., 1., -1., -1.],
        [ 0., 1., 0., 0., 1., 0.],
        [ 1., 0., 1., 1., 0., 1.],
        [ 1., 0., 1., 1., 0., -1.],
        [ 0., 0., 0., 1., 0., -1.],
        [ 1., 1., 1., 0., -1., -1.]]),[4,6]],
}
    

def board_config_test(model_cls):
    """
    Test the results obtained by a model in pre-defined board configurations
    and return a percentage of the success.

    model : Neural Network Model

    """
    
    game = Connect4Env(None)
    success = 0 
    model = model_cls
    for elem in BOARD_CONFIGS:
        board = BOARD_CONFIGS[elem][0]
        act_to_do = BOARD_CONFIGS[elem][1]
        
        game.reset()
        game.board = board

        input_dict = {"obs": {}}
        # if model.use_conv:
        #     reshaped_board = np.expand_dims(board, axis=(0,-1))

        # else:
        #     reshaped_board = np.reshape(board, (1, board.shape[0] * board.shape[1]))
        action_mask = game.get_moves(True)
        input_dict["obs"]["state"] = board #reshaped_board
        input_dict["obs"]["action_mask"] = action_mask
        action_logits, _ = model.forward(input_dict, None, None)
        act = np.argmax(action_logits)

        if act in act_to_do:
            success += 1
    
    num_of_configs = len(BOARD_CONFIGS)
    success_rate = success/num_of_configs
    return success_rate , success , num_of_configs


if __name__ == "__main__":
    # check if the given board configuration and actions are valid:
    env = Connect4Env(None) 
    for elem in BOARD_CONFIGS:
        if elem.startswith("win_in_2"):
            continue
        actions_to_take = BOARD_CONFIGS[elem][1]
        board_config = BOARD_CONFIGS[elem][0]
        for act in actions_to_take:
            env.reset()
            env.board = board_config
            env.current_player = 0
            action = {"player1": act}
            obs, reward, done, info = env.step(action)
            if done["__all__"] != True:
                print("Configuration Error: " + str(elem) +":")
                print("The configuration "+ str(env) + " does not end in a winning move " + str(act))



# if __name__ == "__main__":
#     win_in_1 = []
#     lose_in_1 = []
#     test_board_config = Config.TEST_BOARD_CONFIG
#     for file in os.listdir(test_board_config):
#         if file == "README.txt":
#             continue
#         file_path = os.path.join(test_board_config,file)
#         odd_values = 0
#         with open(file_path,"r") as fp: 
#             for line in fp: 
#                 line = line.strip("\n")
#                 spaced_line = line.split(" ")
#                 moves_to_victory = None
#                 moves_to_lost = None
#                 # score = 22 - n_of_discs
#                 # n_of_discs = 22 - score
#                 if int(spaced_line[1]) > 0:
#                     moves_to_victory = int(22 - int(spaced_line[1]))
#                 else: 
#                     moves_to_lost = int(int(spaced_line[1]) + 22)

#                 if int(len(spaced_line[0]) % 2) == 0:
#                     moves_done = int(len(spaced_line[0])/2)
#                 else:
#                     moves_done = int((len(spaced_line[0])-1)/2)
                    
#                 if moves_to_victory:    
#                     if int(moves_to_victory - moves_done) == 1:
#                         win_in_1.append(spaced_line[0])
#                 else:
#                       if int(moves_to_lost - moves_done) == 1:
#                           lose_in_1.append(spaced_line[0])
                         
        